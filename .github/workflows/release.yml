name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            version=$(echo "$GITHUB_REF_NAME" | sed 's/^v//')
            echo "VERSION=$version" >> $GITHUB_OUTPUT
            echo "Tag version: $version"
          else
            echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
            echo "Tag version: ${GITHUB_REF_NAME#v}"
          fi
        shell: bash

      - name: Update package.json version
        run: npm version ${{ steps.get_version.outputs.VERSION }} --no-git-tag-version

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Python and dependencies
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python setuptools
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel

      - name: Setup build environment (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install required build tools for native modules
          npm install -g node-gyp
          # Clear any existing builds to ensure clean ARM64 build
          rm -rf node_modules/.cache

      - name: Setup build environment (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Install Visual Studio Build Tools for native modules
          npm install -g node-gyp
          npm config set msvs_version 2022 --global
          npm config set python python --global
          # Verify Visual Studio Build Tools
          if (Get-Command "cl.exe" -ErrorAction SilentlyContinue) {
            Write-Host "Visual Studio Build Tools found"
          } else {
            Write-Host "Visual Studio Build Tools not found, but continuing..."
          }
          python -m pip install setuptools wheel || echo "setuptools installation failed"

      - name: Clear node_modules cache (Unix)
        if: matrix.os == 'macos-latest'
        run: |
          rm -rf node_modules package-lock.json

      - name: Clear node_modules cache (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path "node_modules") { Remove-Item -Recurse -Force "node_modules" }
          if (Test-Path "package-lock.json") { Remove-Item -Force "package-lock.json" }

      - name: Install dependencies
        run: npm install

      - name: Install electron-rebuild
        run: npm install -g electron-rebuild

      - name: Set up environment for native modules (Unix)
        if: matrix.os == 'macos-latest'
        run: |
          export PYTHON=$(which python)
          export NODE_GYP_FORCE_PYTHON=$(which python)

      - name: Set up environment for native modules (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:PYTHON = (Get-Command python).Source
          $env:NODE_GYP_FORCE_PYTHON = (Get-Command python).Source

      - name: Rebuild native modules with electron-rebuild (Unix)
        if: matrix.os == 'macos-latest'
        run: electron-rebuild

      - name: Rebuild native modules with electron-rebuild (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $env:npm_config_target_arch = "x64"
          $env:npm_config_target_platform = "win32"
          electron-rebuild

      - name: Fallback manual sqlite3 rebuild
        run: npm run rebuild
        continue-on-error: true

      - name: Verify version before build
        shell: bash
        run: |
          echo "Building version: $(node -p "require('./package.json').version")"
          echo "Git tag: ${{ github.ref }}"
          echo "Extracted version: ${{ steps.get_version.outputs.VERSION }}"

      - name: Build/release Electron app (macOS)
        if: matrix.os == 'macos-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 開発用ビルド: 署名なしで許可
          CSC_IDENTITY_AUTO_DISCOVERY: false
          # デバッグ情報を有効化
          DEBUG: electron-builder
          # 本格的なリリースでは以下を有効にする:
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: |
          echo "Building macOS Universal Binary..."
          echo "Current architecture: $(uname -m)"
          echo "Target: Universal Binary (Intel + Apple Silicon)"
          
          # ユニバーサルバイナリビルド
          npm run build:optimized -- --publish=always
          
          # ビルド結果の確認
          echo "Build results:"
          ls -la dist/
          
          # ユニバーサルバイナリの確認
          if [ -f "dist/mac-universal/Movie Library.app/Contents/MacOS/Movie Library" ]; then
            echo "Universal binary architectures:"
            lipo -archs "dist/mac-universal/Movie Library.app/Contents/MacOS/Movie Library"
          fi
          
          # DMGファイルの確認
          for dmg in dist/*-universal.dmg; do
            if [ -f "$dmg" ]; then
              echo "Generated universal DMG: $(basename "$dmg")"
              echo "Size: $(ls -lh "$dmg" | awk '{print $5}')"
            fi
          done

      - name: Build/release Electron app (Windows)
        if: matrix.os == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure native modules are rebuilt for Windows
          npm run rebuild
          npm run build:win -- --publish=always
