{
    "name": "movie-library",
    "version": "0.0.6",
    "description": "A comprehensive video file management application with automatic thumbnail generation and subfolder support",
    "main": "dist-ts/main.js",
    "scripts": {
        "start": "npm run prisma:generate && npm run build:ts && electron .",
        "dev": "npm run prisma:generate && npm run build:ts && electron . --enable-logging",
        "build": "npm run prisma:generate && npm run build:ts && electron-builder",
        "build:mac": "npm run prisma:generate && npm run build:ts && electron-builder --mac",
        "build:win": "npm run prisma:generate && npm run build:ts && electron-builder --win",
        "build:all": "npm run prisma:generate && npm run build:ts && electron-builder --mac --win",
        "build:mac-light": "npm run clean && npm run prisma:generate && npm run build:ts && electron-builder --mac --config.compression=store",
        "build:optimized": "npm run clean && npm run prisma:generate && npm run build:ts && electron-builder --mac --config.compression=maximum",
        "dist": "npm run prisma:generate && npm run build:ts && electron-builder --publish=never",
        "release": "npm run prisma:generate && npm run build:ts && electron-builder --publish=always",
        "clean": "rimraf dist node_modules/.cache",
        "clean:ts": "rimraf dist-ts",
        "build:ts": "npm run clean:ts && npm run build:ts:main && npm run build:ts:renderer && npm run copy:prisma && npm run copy:renderer-files",
        "build:ts:main": "tsc --project tsconfig.json",
        "build:ts:renderer": "tsc --project tsconfig.renderer.json",
        "copy:prisma": "shx mkdir -p dist-ts/generated && shx rm -rf dist-ts/generated/prisma && shx cp -r generated/prisma dist-ts/generated/",
        "copy:renderer-files": "shx mkdir -p dist-ts/src/renderer && shx cp src/renderer/index.html dist-ts/src/renderer/ && shx cp src/renderer/styles.css dist-ts/src/renderer/ && shx cp dist-ts/renderer/src/renderer/*.js dist-ts/src/renderer/ && shx mkdir -p dist-ts/src/types && shx cp dist-ts/renderer/src/types/*.js dist-ts/src/types/",
        "build:ts:watch": "npm run clean:ts && npm run build:ts && npm run watch",
        "watch": "tsc --watch",
        "type-check": "tsc --noEmit",
        "lint": "eslint src/**/*.ts main.ts preload.ts --fix",
        "lint:check": "eslint src/**/*.ts main.ts preload.ts",
        "version:patch": "npm version patch && git push --follow-tags",
        "version:minor": "npm version minor && git push --follow-tags",
        "version:major": "npm version major && git push --follow-tags",
        "postinstall": "electron-builder install-app-deps",
        "prisma:generate": "prisma generate",
        "prisma:migrate": "prisma migrate dev",
        "prisma:deploy": "prisma migrate deploy",
        "prisma:db-push": "prisma db push",
        "prisma:studio": "prisma studio",
        "prisma:push": "prisma db push"
    },
    "keywords": [
        "electron",
        "video",
        "management",
        "media"
    ],
    "author": "Your Name",
    "license": "MIT",
    "devDependencies": {
        "@electron/rebuild": "^3.6.0",
        "@types/fluent-ffmpeg": "^2.1.27",
        "@types/node": "^24.0.14",
        "@typescript-eslint/eslint-plugin": "^8.38.0",
        "@typescript-eslint/parser": "^8.38.0",
        "electron": "^27.0.0",
        "electron-builder": "^24.6.4",
        "electron-webpack": "^2.8.2",
        "eslint": "^9.31.0",
        "eslint-plugin-unused-imports": "^4.1.4",
        "rimraf": "^5.0.10",
        "shx": "^0.3.4",
        "ts-node": "^10.9.2",
        "typescript": "^5.8.3"
    },
    "dependencies": {
        "@prisma/client": "^6.12.0",
        "chokidar": "^3.5.3",
        "ffmpeg-static": "^5.2.0",
        "ffprobe-static": "^3.1.0",
        "fluent-ffmpeg": "^2.1.2",
        "jiti": "^2.4.2",
        "prisma": "^6.12.0"
    },
    "build": {
        "appId": "com.yourcompany.movielibrary",
        "productName": "Movie Library",
        "directories": {
            "output": "dist"
        },
        "icon": "assets/icon",
        "npmRebuild": true,
        "buildDependenciesFromSource": false,
        "nodeGypRebuild": false,
        "compression": "maximum",
        "extraMetadata": {
            "main": "dist-ts/main.js"
        },
        "beforeBuild": "scripts/before-build.js",
        "afterPack": "scripts/after-pack.js",
        "asarUnpack": [
            "node_modules/ffmpeg-static/**/*",
            "node_modules/ffprobe-static/**/*",
            "node_modules/prisma/**/*",
            "node_modules/@prisma/**/*",
            "node_modules/jiti/**/*",
            "prisma/schema.prisma",
            "prisma/migrations/**/*",
            "dist-ts/generated/prisma/**/*",
            "generated/prisma/**/*"
        ],
        "files": [
            "dist-ts/**/*",
            "generated/**/*",
            "prisma/schema.prisma",
            "prisma/migrations/**/*",
            "main.js",
            "preload.js",
            "assets/icon.*",
            "package.json",
            "scripts/force-uninstall.bat",
            "scripts/force-uninstall.ps1",
            "WINDOWS_UNINSTALL_GUIDE.md",
            "node_modules/chokidar/index.js",
            "node_modules/chokidar/lib/**/*",
            "node_modules/ffmpeg-static/**/*",
            "node_modules/ffprobe-static/**/*",
            "node_modules/fluent-ffmpeg/index.js",
            "node_modules/fluent-ffmpeg/lib/**/*",
            "node_modules/prisma/**/*",
            "node_modules/@prisma/**/*",
            "node_modules/jiti/**/*",
            "!**/static",
            "!**/node_modules/*/{CHANGELOG.md,README.md,README,readme.md,readme,HISTORY.md,CHANGES.md,AUTHORS,CONTRIBUTORS}",
            "!**/node_modules/*/{test,__tests__,tests,powered-test,example,examples,spec,specs,doc,docs,documentation}/**/*",
            "!**/node_modules/*/{.github,.vscode,.idea,coverage}/**/*",
            "!**/node_modules/*.d.ts",
            "!**/node_modules/.bin/**/*",
            "!**/node_modules/**/*.map",
            "!**/node_modules/**/*.md",
            "!**/LICENSE*",
            "!**/COPYING*",
            "!**/*.{iml,o,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,xproj}",
            "!.editorconfig",
            "!**/._*",
            "!**/{.DS_Store,.git,.hg,.svn,CVS,RCS,SCCS,.gitignore,.gitattributes}",
            "!**/{__pycache__,thumbs.db,.flowconfig,.idea,.vs,.nyc_output}",
            "!**/{appveyor.yml,.travis.yml,circle.yml}",
            "!**/{npm-debug.log,yarn.lock,.yarn-integrity,.yarn-metadata.json}",
            "!**/node_modules/*/docs/**/*",
            "!**/node_modules/*/documentation/**/*",
            "!**/node_modules/*/man/**/*",
            "!**/node_modules/*/.travis.yml",
            "!**/node_modules/*/.eslintrc*",
            "!**/node_modules/*/tsconfig.json",
            "!**/node_modules/*/webpack.config.js",
            "!**/node_modules/*/rollup.config.js",
            "!**/node_modules/*/gulpfile.js",
            "!**/node_modules/*/Gruntfile.js",
            "!**/node_modules/*/Makefile",
            "!**/node_modules/*/*.coffee",
            "!**/node_modules/*/*.flow"
        ],
        "mac": {
            "icon": "assets/icon.icns",
            "category": "public.app-category.video",
            "darkModeSupport": true,
            "hardenedRuntime": true,
            "entitlements": "build/entitlements.mac.plist",
            "entitlementsInherit": "build/entitlements.mac.plist",
            "artifactName": "${productName}-${version}-universal.${ext}",
            "target": [
                {
                    "target": "dmg",
                    "arch": "universal"
                }
            ]
        },
        "win": {
            "icon": "assets/icon.ico",
            "target": [
                {
                    "target": "nsis",
                    "arch": [
                        "x64"
                    ]
                }
            ]
        },
        "nsis": {
            "oneClick": false,
            "allowToChangeInstallationDirectory": true,
            "createDesktopShortcut": true,
            "createStartMenuShortcut": true,
            "runAfterFinish": false,
            "deleteAppDataOnUninstall": false,
            "perMachine": false,
            "installerIcon": "assets/icon.ico",
            "uninstallerIcon": "assets/icon.ico",
            "uninstallDisplayName": "${productName}",
            "include": "build/installer.nsh"
        }
    }
}